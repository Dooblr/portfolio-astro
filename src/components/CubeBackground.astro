<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Static Three.js Cube</title>
    <style>
        .cube-section {
            position: relative;
            width: 100%;
            height: 400px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 2rem 0;
            overflow: hidden;
            background: #f8f9fa;
        }
        
        .three-container {
            width: 100%;
            max-width: 500px;
            height: 100%;
        }
        
        .three-container canvas {
            display: block;
            width: 100% !important;
            height: 100% !important;
        }
        
        @media (max-width: 768px) {
            .cube-section {
                height: 300px;
                margin: 1.5rem 0;
            }
            
            .three-container {
                max-width: 400px;
            }
        }
        
        @media (max-width: 480px) {
            .cube-section {
                height: 250px;
                margin: 1rem 0;
            }
            
            .three-container {
                max-width: 300px;
            }
        }
        
        /* Add subtle background pattern */
        .cube-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                radial-gradient(circle at 20% 20%, rgba(0, 0, 0, 0.03) 1px, transparent 1px),
                radial-gradient(circle at 80% 80%, rgba(0, 0, 0, 0.03) 1px, transparent 1px),
                radial-gradient(circle at 40% 60%, rgba(0, 0, 0, 0.02) 1px, transparent 1px);
            background-size: 50px 50px, 30px 30px, 70px 70px;
            pointer-events: none;
            opacity: 0.5;
        }
        
        /* Dark theme */
        [data-theme="dark"] .cube-section {
            background: #1a1a1a;
        }
        
        [data-theme="dark"] .cube-section::before {
            background: 
                radial-gradient(circle at 20% 20%, rgba(255, 255, 255, 0.08) 1px, transparent 1px),
                radial-gradient(circle at 80% 80%, rgba(255, 255, 255, 0.06) 1px, transparent 1px),
                radial-gradient(circle at 40% 60%, rgba(255, 255, 255, 0.04) 1px, transparent 1px);
            background-size: 50px 50px, 30px 30px, 70px 70px;
        }
        
        /* Theme toggle button for demo */
        .theme-toggle {
            position: absolute;
            top: 20px;
            right: 20px;
            padding: 10px 20px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }
        
        .theme-toggle:hover {
            background: #0056b3;
        }
    </style>
</head>
<body>
    <section class="cube-section">
        <div id="three-container" class="three-container"></div>
        <button class="theme-toggle" onclick="toggleTheme()">Toggle Theme</button>
    </section>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // Wait for DOM to be ready
        document.addEventListener('DOMContentLoaded', () => {
            const container = document.getElementById('three-container');
            if (!container) return;

            // Scene setup
            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
            const renderer = new THREE.WebGLRenderer({ 
                antialias: true, 
                alpha: true 
            });
            
            renderer.setSize(container.clientWidth, container.clientHeight);
            renderer.setClearColor(0x000000, 0); // Transparent background
            container.appendChild(renderer.domElement);

            // Create cube geometry
            const geometry = new THREE.BoxGeometry(1.5, 1.5, 1.5);
            
            // Create material with wireframe
            const material = new THREE.MeshBasicMaterial({
                color: 0x000000,
                wireframe: true,
                transparent: true,
                opacity: 0.6
            });
            
            const cube = new THREE.Mesh(geometry, material);
            scene.add(cube);

            // Add points at cube vertices for extra visual interest
            const points = [];
            const pointGeometry = new THREE.SphereGeometry(0.03, 8, 8);
            const pointMaterial = new THREE.MeshBasicMaterial({
                color: 0x000000,
                transparent: true,
                opacity: 0.8
            });

            // Add points at cube vertices
            const vertices = [
                [-0.75, -0.75, -0.75], [0.75, -0.75, -0.75],
                [-0.75, 0.75, -0.75], [0.75, 0.75, -0.75],
                [-0.75, -0.75, 0.75], [0.75, -0.75, 0.75],
                [-0.75, 0.75, 0.75], [0.75, 0.75, 0.75]
            ];

            vertices.forEach(vertex => {
                const point = new THREE.Mesh(pointGeometry, pointMaterial);
                point.position.set(...vertex);
                points.push(point);
                scene.add(point);
            });

            // Position camera and set static rotation
            camera.position.z = 4;
            
            // Set a nice static rotation for the cube
            cube.rotation.x = 0.3;
            cube.rotation.y = 0.4;
            cube.rotation.z = 0.1;

            // Handle window resize
            function handleResize() {
                if (!container) return;
                
                const width = container.clientWidth;
                const height = container.clientHeight;
                
                camera.aspect = width / height;
                camera.updateProjectionMatrix();
                renderer.setSize(width, height);
            }
            
            window.addEventListener('resize', handleResize);
            
            // Handle theme changes
            function updateTheme() {
                const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
                
                if (isDark) {
                    // White cube and points for dark mode
                    cube.material.color.setHex(0xffffff);
                    cube.material.opacity = 0.7;
                    points.forEach(point => {
                        point.material.color.setHex(0xffffff);
                        point.material.opacity = 0.9;
                    });
                } else {
                    // Black cube and points for light mode
                    cube.material.color.setHex(0x000000);
                    cube.material.opacity = 0.6;
                    points.forEach(point => {
                        point.material.color.setHex(0x000000);
                        point.material.opacity = 0.8;
                    });
                }
            }
            
            // Listen for theme changes
            const observer = new MutationObserver(updateTheme);
            observer.observe(document.documentElement, {
                attributes: true,
                attributeFilter: ['data-theme']
            });
            
            // Initial theme setup
            updateTheme();
            
            // Animation loop for slow rotation
            function animate() {
                requestAnimationFrame(animate);
                
                // Slow rotation
                cube.rotation.x += 0.005;
                cube.rotation.y += 0.007;
                cube.rotation.z += 0.003;
                
                renderer.render(scene, camera);
            }
            
            // Start animation loop
            animate();
            
            // Re-render on resize
            window.addEventListener('resize', () => {
                handleResize();
            });
            
            // Cleanup function
            window.addEventListener('beforeunload', () => {
                observer.disconnect();
                window.removeEventListener('resize', handleResize);
                renderer.dispose();
                geometry.dispose();
                material.dispose();
                pointGeometry.dispose();
                pointMaterial.dispose();
            });
        });

        // Theme toggle function for demo
        function toggleTheme() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            document.documentElement.setAttribute('data-theme', newTheme);
        }
    </script>
</body>
</html>